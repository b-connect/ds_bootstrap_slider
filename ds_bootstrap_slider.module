<?php
function ds_bootstrap_slider_ctools_plugin_directory($module, $plugin) {
  if ($module == 'panels' && $plugin == 'styles') {
    return 'plugins/' . $plugin;
  }
}

function ds_bootstrap_slider_field_formatter_info() {
  return array(
      //Machine name of the formatter
    'ds_bootstrap_slider' => array(
      'label' => t('Bootstrap Slider'),
      // This will only be available to entityreference and file entity fields
      'field types' => array('entityreference', 'file', 'image'),
        //Settings
      'settings' => array(
        // Default interval time
        'interval' => 3000,
        // Pause on hover|click
        'pause' => 'hover',
        'wrap' => 0,
        'nav' => 1,
        'view_mode' => 'default',
      ),
    ),
  );
}

function ds_bootstrap_slider_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  //Add your select box
  $element['interval'] = array(
    // Use a select box widget
    '#type' => 'textfield',
    // Widget label
    '#title' => t('Interval'),
    // Helper text
    '#description' => t('The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.'),
    // Get the value if it's already been set
    '#default_value' => $settings['interval'],
  );
  $element['pause'] = array(
    // Use a textbox
    '#type' => 'textfield',
    // Widget label
    '#title' => t('Pause'),
    // helper text
    '#description' => t('Pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on mouseleave.'),
    // Get the value if it's already been set
    '#default_value' => $settings['pause'],
  );
  $element['wrap'] = array(
    // Use a textbox
    '#type' => 'checkbox',
    // Widget label
    '#title' => t('Wrap'),
    // helper text
    '#description' => t('Whether the carousel should cycle continuously or have hard stops.'),
    '#return_value' => 1,
    // Get the value if it's already been set
    '#default_value' => $settings['wrap'],
  );
  $element['nav'] = array(
    // Use a textbox
    '#type' => 'checkbox',
    // Widget label
    '#title' => t('Show navigation'),
    '#return_value' => 1,
    // Get the value if it's already been set
    '#default_value' => $settings['nav'],
  );
  $options = array('default' => t('Default'));

  if ($field['type'] == 'file' || $field['type'] == 'image') {
    $info = entity_get_info('file');
  }
  else {
    $info = entity_get_info($field['settings']['target_type']);
  }
  if ($info['view modes']) {
    foreach ($info['view modes'] as $key => $label) {
      $options[$key] = $label['label'];
    }
  }
  $element['view_mode'] = array(
    // Use a textbox
    '#type' => 'select',
    // Widget label
    '#title' => t('View mode'),
    // helper text
    '#description' => t('Whether the carousel should cycle continuously or have hard stops.'),
    '#options' => $options,
    // Get the value if it's already been set
    '#default_value' => $settings['view_mode'],
  );
  return $element;
}

function ds_bootstrap_slider_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Interval: @interval, Pause: @pause, Wrap: @wrap', array(
      '@interval' => $settings['interval'],
      '@pause' => $settings['pause'],
      '@wrap' => $settings['wrap'],
    ));
  return $summary;
}

function ds_bootstrap_slider_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Initialize the var
  $element = array();
  // get the settings
  $settings = $display['settings'];
  $id = drupal_html_id('carousel-' . $field['field_name']);

  if ($field['type'] == 'file' || $field['type'] == 'image') {
    $entity_to_load = 'file';
    $entity_load_key = 'files';
  }
  else {
    $entity_to_load = $entity_load_key = $field['settings']['target_type'];
    $entity_load_key = $entity_to_load;
  }

  $element['#prefix'] = '<div id="' . $id . '" class="carousel slide" data-interval="' . $settings['interval'] . '" data-wrap="' . $settings['wrap'] . '" data-pause="' . $settings['pause'] . '" data-ride="carousel"><div class="carousel-inner">';
  $element['#suffix'] = '</div></div>';

  $entity_id = entity_extract_ids($entity_type, $entity);
  $entity_id = array_shift($entity_id);
  $etids = array();

  $settings['id'] = $id . '-' . $entity_id;

  foreach ($items as $item) {
    if ($field['type'] == 'file' || $field['type'] == 'image') {
      $etids[] = $item['fid'];
    }
    else $etids[] = $item['target_id'];
  }

  if (count($etids) == 0) {

    return array();

  }

  if ($field['type'] != 'file' || $field['type'] != 'image') {

    $entities = entity_load($entity_to_load, $etids);
  }
  else {
    $entities = $items;
  }

  foreach ($entities as $entity) {
    $content[] = entity_view($entity_to_load, array($entity), $settings['view_mode']);
  }

  $element = array(
    '#theme' => 'ds_bootstrap_slider',
    '#items' => $content,
    '#settings' => $settings,
    '#entity_type' => $entity_to_load,
  );

  return $element;
}

function template_preprocess_ds_bootstrap_slider(&$vars) {
  $vars['theme_hook_suggestions'][] = 'ds-bootstrap-slider__' . $vars['entity_type'];
  $vars['theme_hook_suggestions'][] = 'ds-bootstrap-slider__' . $vars['entity_type'] . '_' . $vars['settings']['view_mode'];
}

function ds_bootstrap_slider_theme($existing, $type, $theme, $path) {
  return array('ds_bootstrap_slider' => array(
      'variables' => array('items' => array(), 'settings' => array(), 'entity_type' => NULL),
      'path' => drupal_get_path('module', 'ds_bootstrap_slider') . '/theme',
      'template' => 'ds-bootstrap-slider',
    ));
}

